#!/bin/zsh -f

typeset -r help_message='USAGE
  o zgold [--help|-h]
    Display this help message.

  o zgold (--version|-v)
    Display the version.

  o zgold <config-file> [<sub-command>]
    <config-file>
      Config file path, written in Zsh. If this arg is a dir path instead of a
      file path, then the file is assumed to be `config.zsh` within the dir. The
      config file must define the following vars:
        * test_cases
            Associative array. Keys are test case names and values are commands.
            The commands can have the placeholder <N>, which is substituted by
            the name of the test case before the command is executed.
        * resources
            Holds the path to a dir to provide data for the command. At a
            minimum, it is expected that for each test case there is one golden
            file in this directory with the name `<test_case_name>_golden.txt`.
      Optionally, the config file may also define these vars:
        * pre_diff_hooks
            Associative array. Keys are test case names and values are commands.
            The output of the test case command is piped to the pre diff hook
            command. This happens before the diff against the golden file. This
            is useful to remove parts of the output of the test case command
            which are expected to change among runs, such as timestamps.
    <sub-command>
      See the section SUB-COMMANDS. Default: `run`.

  o zgold -d <directory...>
    Execute the sub-command `run` for every directory.
    <directory>
      A dir which has a `config.zsh` file as per expected by the command form
      `zgold <config-file [<sub-command>]>`. Useful for CI.

SUB-COMMANDS
  * ls
      List all test cases.
  * run [<test-case-name>]
      Run all test cases or a single test case by name.
  * patch [<test-case-name>]
      Patch (with `run`s output) all test cases or a single test case by name.
  * exec <test-case-name>
      Execute the command corresponding to a test case by name.

EXIT CODES
  The exit code is the total of failed test cases.

EXAMPLES
  * List all test cases: `zgold test/all_pass/config.zsh ls`
  * Run all test cases: `zgold test/all_pass/config.zsh run`
  * Run all test cases: `zgold test/all_pass`'

# Form: zgold [--help|-h]

if [[ "${1}" = '--help' ]] || [[ "${1}" = '-h' ]] || [[ "${#@}" -eq 0 ]]; then
  echo "${help_message}"
  exit 0
fi

# Form: zgold (--version|-v)

if [[ "${1}" = '--version' ]] || [[ "${1}" = '-v' ]]; then
  echo '0.4.0'
  exit 0
fi

# Form: zgold -d <directory...>

if [[ "${1}" = '-d' ]]; then
  typeset -a exit_codes=()
  for dir in ${@[@]:2}; do
    test_cases=($(zgold "${dir}" ls))
    dir_basename="$(basename -a "${dir}")"
    zgold "${dir}" run \
      | awk -v dir="${dir_basename}" -v regex="^${(j:$|^:)test_cases}$" '
        {
          # Print the basename of the dir only before each test case name.
          if (match($0, regex)) {
            print(dir " -- " $0)
          } else {
            print($0)
          }
        }'
    # About `pipestatus`: https://unix.stackexchange.com/a/14276
    exit_codes+=(${pipestatus[1]})
  done
  # Total of failed test cases.
  exit $(eval "echo $(( ${(j:+:)exit_codes} ))")
fi

# Form: zgold <config-file> [<sub-command>]

if [[ -f "${1}" ]] . "${1}"
if [[ -d "${1}" ]] . "${1}/config.zsh"

## @param $1 Command.
## @param $2 Test case name.
function _build_command {
  echo "${${1}//<N>/${2}}"
}

## @param $1 Test case name.
## @param $2 Resources directory path.
## @param $3 Command used to get the result to compare with the golden file.
## @param $4 (optional) Patch or not to patch. By default, do not patch.
## @stdout Diff or patch output.
function _run_test {
  echo "${1}"

  # setup - data
  local golden_file_path="${2}/${1}_golden.txt"
  local cmd_output="$(eval $(_build_command "${3}" "${1}"))"
  if ! [[ -f "${golden_file_path}" ]]; then
    touch "${golden_file_path}"
  fi
  if [[ -n ${pre_diff_hooks} ]] && [[ -n "${pre_diff_hooks[${1}]}" ]]; then
    cmd_output="$(eval "echo \"${cmd_output}\" | ${pre_diff_hooks[${1}]}")"
  fi

  # execute
  local diff=$(diff -u "${golden_file_path}" <(echo "${cmd_output}"))

  if [[ "${4}" = 'patch' ]]; then
    echo "${cmd_output}" > "${golden_file_path}"
    echo "Patch complete for: ${golden_file_path}"
  elif [[ -n "${diff}" ]]; then
    # verify
    command -v delta >/dev/null \
      && echo "${diff}" | delta --pager 'less -rFX' \
      || echo "${diff}"
    return 1
  fi
  return 0
}

# SUB COMMANDS

## List all test cases.
function ls {
  for test_case_name in ${(k)test_cases}; do
    echo "${test_case_name}"
  done
}

## Run all test cases or a single test case by name.
## @param $1 Test case name.
function run {
  if [[ -z ${1} ]]; then
    local -a exit_codes=()
    for test_case_name test_case_command in ${(kv)test_cases}; do
      _run_test "${test_case_name}" "${resources}" "${test_case_command}"
      exit_codes+=($?)
    done
    # Total of failed test cases.
    exit $(eval "echo $(( ${(j:+:)exit_codes} ))")
  fi
  _run_test "${1}" "${resources}" "${test_cases[${1}]}"
  # Total of failed test cases.
  exit $?
}

## Default sub-command: `run`.
if [[ ${#@} -eq 1 ]]; then
  run
  exit 0
fi

## Patch (with `run`s output) all test cases or a single test case by name.
## @param $1 Test case name.
function patch {
  if [[ -z ${1} ]]; then
    for test_case_name test_case_cmd in ${(kv)test_cases}; do
      _run_test "${test_case_name}" "${resources}" "${test_case_cmd}" 'patch'
    done
    exit 0
  fi
  _run_test "${1}" "${resources}" "${test_cases[${1}]}" 'patch'
}

## Run the command for a single test case by name.
## @param $1 Test case name.
function exec {
  eval $(_build_command "${test_cases[${1}]}" "${1}")
}

eval "${@[@]:2}"
